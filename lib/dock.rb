class Dock
  attr_reader :name,
              :max_rental_time,
              :rental_log

  def initialize(name, max_rental_time)
    @name = name
    @max_rental_time = max_rental_time
    @rental_log = {}
  end

  def rent(boat, renter)
    boat.check_out
    @rental_log[boat] = renter
  end

  ### iteration 3 start
  def charge(boat)
    total = {}
    total[:card_number] = renter_credit_card(boat)
    total[:amount] = charge_amount(boat)
    total
  end

  def renter_credit_card(boat)
    rental_log[boat].credit_card_number
  end

  def charge_amount(boat)
    return max_charge_amount(boat) if max_rental_time?(boat)
    boat.total_charge
  end

  def max_charge_amount(boat)
    max_rental_time * boat.price_per_hour
  end

  def max_rental_time?(boat)
    boat.hours_rented >= max_rental_time
  end
  ### iteration 3 end

  ### iteration 4 start

  # This method takes a Boat object as an argument.
  # When this method is called, it signifies that a boat
  # has been returned and is no longer being rented.
  def return(boat)
    boat.check_in
  end

  # This method takes no arguments.
  # When it is called, all boats that are currently
  # rented have been rented an additional hour.
  def log_hour
    rental_log.each { |boat, renter| boat.add_hour }
  end

  # This method takes no arguments.
  # It returns the total revenue generated by charging
  # all boats that have been rented and returned.
  # A charge for a boat follows the same rules as iteration 3.

  def revenue
    total = rental_log.reduce(0) do |memo, (boat, renter)|
      memo += charge_amount(boat) if boat.rented == false
    end
    return 0 if total == nil
    total
  end
end
